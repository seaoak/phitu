env:
  es6: true
extends: 'eslint:recommended'
parserOptions:
  ecmaVersion: 8
  sourceType: module
rules:
  ###=========================================================================
  ### "Possible Errors" rules
  ###=========================================================================
  for-direction:
    - error
  getter-return:
    - error
  no-await-in-loop:
    - error
  no-compare-neg-zero:
    - error
  no-cond-assign:
    - error
  no-console:
    - error
  no-constant-condition:
    # NOTE: Use "for(;;)" as infinite loop (instead of "while(true)")
    - error
  no-control-regex:
    - error
  no-debugger:
    - error
  no-dupe-args:
    - error
  no-dupe-keys:
    - error
  no-duplicate-case:
    - error
  no-empty:
    - error
  no-empty-character-class:
    - error
  no-ex-assign:
    - error
  no-extra-boolean-cast:
    - error
  no-extra-parens:
    - off
  no-extra-semi:
    - error
  no-func-assign:
    - error
  no-inner-declarations:
    - error
  no-invalid-regexp:
    - error
  no-irregular-whitespace:
    - error
  no-obj-calls:
    - error
  no-prototype-builtins:
    - error
  no-regex-spaces:
    - error
  no-sparse-arrays:
    - error
  no-template-curly-in-string:
    - error
  no-unexpected-multiline:
    - error
  no-unreachable:
    - error
  no-unsafe-finally:
    - error
  no-unsafe-negation:
    - error
  use-isnan:
    - error
  # valid-jsdoc:
  valid-typeof:
    - error
    -
      requireStringLiterals: true
  ###=========================================================================
  ### "Best Practices" rules
  ###=========================================================================
  # accessor-pairs:
  array-callback-return:
    - error
  block-scoped-var:
    - error
  # class-methods-use-this:
  # complexity:
  consistent-return:
    - error
  curly:
    - error
    - multi-line
    - consistent
  default-case:
    - error
  dot-location:
    - error
    - property
  dot-notation:
    - error
  eqeqeq:
    - error
  # guard-for-in:
  no-alert:
    - error
  no-caller:
    - error
  no-case-declarations:
    - error
  no-div-regex:
    - error
  no-else-return:
    - error
    -
      allowElseIf: false
  no-empty-function:
    - error
  no-empty-pattern:
    - error
  no-eq-null:
    - error
  no-eval:
    - error
  no-extend-native:
    - error
  no-extra-bind:
    - error
  no-extra-label:
    - error
  no-fallthrough:
    - error
  no-floating-decimal:
    - error
  no-global-assign:
    - error
  no-implicit-coercion:
    - error
  no-implicit-globals:
    - error
  no-implied-eval:
    - error
  no-invalid-this:
    - error
  no-iterator:
    - error
  no-labels:
    - error
  no-lone-blocks:
    - error
  no-loop-func:
    - error
  no-magic-numbers:
    - error
    -
      ignore: [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
      ignoreArrayIndexes: true
      enforceConst: true
      detectObjects: false
  no-multi-spaces:
    - error
    -
      ignoreEOLComments: true
  no-multi-str:
    - error
  no-new:
    - error
  no-new-func:
    - error
  no-new-wrappers:
    - error
  no-octal:
    - error
  no-octal-escape:
    - error
  no-param-reassign:
    - error
    -
      props: true
      ignorePropertyModificationsFor: []
  no-proto:
    - error
  no-redeclare:
    - error
  # no-restricted-properties:
  no-return-assign:
    - error
    - always
  no-return-await:
    - error
  no-script-url:
    - error
  no-self-assign:
    - error
    -
      props: true
  no-self-compare:
    - error
  no-sequences:
    - error
  no-throw-literal:
    - error
  no-unmodified-loop-condition:
    - error
  no-unused-expressions:
    - error
  no-unused-labels:
    - error
  no-useless-call:
    - error
  no-useless-concat:
    - error
  no-useless-escape:
    - error
  no-useless-return:
    - error
  no-void:
    - error
  # no-warning-comments:
  no-with:
    - error
  prefer-promise-reject-errors:
    - error
  radix:
    - error
  require-await:
    - error
  vars-on-top:
    - off
  wrap-iife:
    - error
    - inside
  yoda:
    - error
    - never
    -
      exceptRange: true
      onlyEquality: false
  ###=========================================================================
  ### "Variables" rules
  ###=========================================================================
  init-declarations:
    - error
    - always
  no-catch-shadow:
    - error
  no-delete-var:
    - error
  no-label-var:
    - error
  # no-restricted-globals:
  no-shadow:
    # https://eslint.org/docs/rules/no-shadow
    # NOTE: ['resolve', 'reject', 'done', 'cb'] are not allowed because they suggest nested callback functions (should use Promise instead).
    - error
    -
      builtinGlobals: true
      hoist: 'all'
      allow: ['args', 'params', 'arg', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
  no-shadow-restricted-names:
    - error
  no-undef:
    - error
  no-undef-init:
    - error
  no-undefined:
    # NOTE: This rule is incompatible with the rule "no-void" (prefer "undefined" to "void")
    - off
  no-unused-vars:
    # https://eslint.org/docs/rules/no-unused-vars
    - error
    -
      vars: 'all'
      varsIgnorePattern: '_$'
      args: 'all'
      ignoreRestSiblings: false
      argsIgnorePattern: '_$'
      caughtErrors: 'all'
      caughtErrorsIgnorePattern: '_$'
  no-use-before-define:
    - error
    -
      functions: false
      classes: true
      variables: true
  ###=========================================================================
  ### "Node.js and CommonJS" rules
  ###=========================================================================
  callback-return:
    - error
    - ['callback', 'cb', 'next', 'done', 'success', 'resolve', 'reject']
  global-require:
    - error
  # handle-callback-err:
  no-buffer-constructor:
    - error
  no-mixed-requires:
    - error
    -
      grouping: true
      allowCall: true
  no-new-require:
    - error
  no-path-concat:
    - error
  no-process-env:
    # NOTE: If necessary, you should make an exclusive module to get environment variables.
    - error
  no-process-exit:
    - error
  # no-restricted-modules:
  no-sync:
    - error
  ###=========================================================================
  ### "Stylistic Issues" rules
  ###=========================================================================
  array-bracket-newline:
    - error
    - consistent
  array-bracket-spacing:
    - error
    - never
  array-element-newline:
    # NOTE: Should be consistent in an array literal.
    - off
  block-spacing:
    - error
    - always
  brace-style:
    - error
    - 1tbs
    -
      allowSingleLine: true
  camelcase:
    - error
  capitalized-comments:
    - off
  comma-dangle:
    - error
    - always-multiline
  comma-spacing:
    - error
  comma-style:
    - error
    - last
  computed-property-spacing:
    - error
    - never
  consistent-this:
    - error
    - that
  eol-last:
    - error
    - always
  func-call-spacing:
    - error
    - never
  func-name-matching:
    - off
  func-names:
    # NOTE: Use arrow function expression instead of anonymous function
    - error
    - always
  func-style:
    - error
    - declaration
    -
      allowArrowFunctions: true
  function-paren-newline:
    - error
    - multiline
  # id-blacklist:
  # id-length:
  # id-match:
  implicit-arrow-linebreak:
    - error
    - beside
  indent:
    - error
    - 2
  jsx-quotes:
    - error
    - prefer-double
  key-spacing:
    - error
    -
      beforeColon: false
      afterColon: true
      mode: strict
  keyword-spacing:
    - error
    -
      before: true
      after: true
  line-comment-position:
    - off
  linebreak-style:
    - error
    - unix
  lines-around-comment:
    # NOTE: Use a block comment only if it is independent paragraphs or directives (JSDoc, ESLint, ...).
    #       So any block comments should not be used in Block/Object/Array/Class literal.
    - error
    -
      beforeBlockComment: true
      applyDefaultIgnorePatterns: true
  lines-between-class-members:
    - error
    - always
    -
      exceptAfterSingleLine: true
  # max-depth:
  max-len:
    # NOTE: Today we use *WIDE* displays. So the width of terminals (=80) is no longer meaningful. A line-break shuold be based on its semantics.
    - off
  # max-lines:
  # max-nested-callbacks:
  # max-params:
  # max-statements:
  # max-statements-per-line:
  # multiline-comment-style:
  multiline-ternary:
    - error
    - always-multiline
  new-cap:
    - error
    -
      newIsCap: true
      capIsNew: false
      properties: true
  new-parens:
    - error
  # newline-per-chained-call:
  no-array-constructor:
    - error
  no-bitwise:
    - error
  no-continue:
    - off
  no-inline-comments:
    - off
  # no-lonely-if:
  no-mixed-operators:
    - error
    -
      groups:
        - ['*', '/', '%', '**']
        - ['&', '|', '^', '~', '<<', '>>', '>>>']
        - ['==', '!=', '===', '!==', '>', '>=', '<', '<=']
        - ['&&', '||']
        - ['in', 'instanceof']
      allowSamePrecedence: true
  no-mixed-spaces-and-tabs:
    - error
  no-multi-assign:
    - error
  no-multiple-empty-lines:
    - error
    -
      max: 2
      maxEOF: 0
      maxBOF: 0
  no-negated-condition:
    - error
  no-nested-ternary:
    # NOTE: Only the type like "a ? b : c ? d : e" is allowed.  The type "a ? b ? c : d : e" is not allowed.
    - off
  no-new-object:
    - error
  no-plusplus:
    - off
  # no-restricted-syntax:
  no-tabs:
    - error
  no-ternary:
    - off
  no-trailing-spaces:
    - error
  no-underscore-dangle:
    # NOTE: An underscore is used to mark an intentionally unused argument (see "no-unused-vars" rule)
    - off
  no-unneeded-ternary:
    - error
  no-whitespace-before-property:
    - error
  nonblock-statement-body-position:
    - error
    - beside
  object-curly-newline:
    - error
    -
      consistent: true
  object-curly-spacing:
    - error
    - never
    -
      arraysInObjects: false
      objectsInObjects: false
  object-property-newline:
    - off
  one-var:
    - error
    - never
  # one-var-declaration-per-line:
  # operator-assignment:
  operator-linebreak:
    - error
    - before
  padded-blocks:
    - off
  # padding-line-between-statements:
  quote-props:
    - error
    - as-needed
    -
      keywords: true
      numbers: true
  quotes:
    - error
    - single
    -
      avoidEscape: true
      allowTemplateLiterals: false
  # require-jsdoc:
  semi:
    - error
    - always
    -
      omitLastInOneLineBlock: true
  semi-spacing:
    - error
    -
      before: false
      after: true
  semi-style:
    - error
    - last
  sort-keys:
    - off
  sort-vars:
    - off
  space-before-blocks:
    - error
    - always
  space-before-function-paren:
    - error
    -
      anonymous: never
      named: never
      asyncArrow: always
  space-in-parens:
    - error
    - never
  space-infix-ops:
    - error
    -
      int32Hint: false
  space-unary-ops:
    # NOTE: The argument of "yield" should not be wrapped in parentheses, that is, "yield" must be followed by a space.
    # NOTE: Neigher "!" nor "!!" is enough distinguishable (it is similar to "l" or "I"), so it should be separeted from its argument.
    - error
    -
      words: true
      nonwords: false
      overrides:
        '!': true
        '!!': true
  spaced-comment:
    - error
    - always
    -
      exceptions: ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '=', '+', '~', '`', '|', '{', '}', '[', ']', ';', ':', '"', "'", ',', '.', '<', '>', '/', '?']
  switch-colon-spacing:
    - error
    -
      after: true
      before: false
  template-tag-spacing:
    - error
    - never
  unicode-bom:
    - error
    - never
  wrap-regex:
    - error
  ###=========================================================================
  ### "ECMAScript 6" rules
  ###=========================================================================
  arrow-body-style:
    - error
    - as-needed
  arrow-parens:
    # NOTE: The confusion of "=>" with ">=" can be detected by "no-constant-condition" rule.
    - error
    - as-needed
    -
      requireForBlockBody: false
  arrow-spacing:
    - error
    -
      before: true
      after: true
  constructor-super:
    - error
  generator-star-spacing:
    # NOTE: According to MDN, the star is not an individual symbol, that is, "function*" is a single symbol.
    #       https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*
    #       https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*
    # NOTE: Should keep compatibility with "space-before-function-paren" rule.
    - error
    -
      before: false
      after: true
      anonymous: neither
      method: both
  no-class-assign:
    - error
  no-confusing-arrow:
    # NOTE: Refer to "no-nested-ternary" rule.
    - off
  no-const-assign:
    - error
  no-dupe-class-members:
    - error
  no-duplicate-imports:
    - error
    -
      includeExports: true
  no-new-symbol:
    - error
  # no-restricted-imports:
  no-this-before-super:
    - error
  no-useless-computed-key:
    # NOTE: For numeric key, basically it itself should not be used, use its string representation "'0': 0" instead of computed key "[0]: 0". Refer to "quote-props" rule.
    - error
  no-useless-constructor:
    - error
  no-useless-rename:
    - error
  no-var:
    - error
  object-shorthand:
    - error
    - methods
    -
      avoidQuotes: true
      ignoreConstructors: false
      avoidExplicitReturnArrows: false
  prefer-arrow-callback:
    # NOTE: "allowUnboundThis: true" might be open to discussion.
    - error
    -
      allowNamedFunctions: true
      allowUnboundThis: true
  prefer-const:
    - error
    -
      destructuring: any
      ignoreReadBeforeAssign: false
  prefer-destructuring:
    - off
  prefer-numeric-literals:
    - error
  prefer-rest-params:
    - error
  prefer-spread:
    - error
  # prefer-template:
  require-yield:
    - error
  rest-spread-spacing:
    - error
    - never
  sort-imports:
    - off
  symbol-description:
    # NOTE: It might be better to use "Symbol.for()" whenever we make an instance of Symbol.
    - error
  template-curly-spacing:
    - error
    - never
  yield-star-spacing:
    - error
    - after
overrides:
  files: ['aaa.js']
  env:
    node: false
    shared-node-browser: true
  parserOptions:
    sourceType: script
  globals:
    require: false
    module: false
    exports: false
    window: false
    global: false
    folktale: false
